upstream coronadonor_api {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  #server 127.0.0.1:3000 fail_timeout=0;
  server unix:/home/coronadonor_api/app/shared/tmp/sockets/puma.sock;
}

server {
    # if you're running multiple servers, instead of "default" you should
    # put your main domain name here

    # you could put a list of other domain names this application answers
    server_name coronadonor_api.example.com;

    root /home/coronadonor_api/app/current/public/;
    access_log /var/log/nginx/coronadonor_api_access.log;
    rewrite_log on;

    client_max_body_size       1000m;
    client_body_buffer_size    100m;

    location / {
      try_files $uri @app;
    }

    location @app {
        #all requests are sent to the UNIX socket
        proxy_pass  http://coronadonor_api;
        proxy_redirect     off;

        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  X-Forwarded-Ssl on; # Optional
        proxy_set_header  X-Forwarded-Port $server_port;




        proxy_connect_timeout      900;
        proxy_send_timeout         900;
        proxy_read_timeout         900;

        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;

        #satisfy all;
        #       allow 4.4.4.4;
        #       deny    all;

        auth_basic           "Please log-in first...";
        auth_basic_user_file /etc/nginx/coronadonor_api_passwd;
    }

}


server {
    listen 80;
    server_name coronadonor_api.example.com;

}
